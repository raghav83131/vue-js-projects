{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  data() {\n    return {\n      activetab: 'section',\n      // Active tab (initially \"section\")\n      sections: [],\n      // Available sections\n      lines: [],\n      // Available lines\n      dates: [],\n      // Available dates\n      selectedSection: '',\n      // Selected section\n      selectedLine: '',\n      // Selected line\n      selectedDate: '',\n      // Selected date\n      kmFrom: '',\n      // KM From\n      kmTo: '',\n      // KM To\n      allData: [] // Store the fetched data\n    };\n  },\n  methods: {\n    fetchData() {\n      // Fetch the data from API (same as before)\n      fetch('http://localhost:8000/dair/get-predictions', {\n        headers: {\n          'Authorization': `Basic ${this.encodeCredentials('DAIR_ML', 'TDMDATAPREP')}`\n        }\n      }).then(response => response.json()).then(data => {\n        this.allData = data;\n        this.populateDropdowns(data);\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n        alert('Error fetching data. Please check console for details.');\n      });\n    },\n    populateDropdowns(data) {\n      // Populate the section dropdown\n      const uniqueSections = [...new Set(data.map(item => item.TMS_SECTION))];\n      this.sections = uniqueSections;\n\n      // Populate the lines and dates\n      this.updateLineDropdown();\n    },\n    updateLineDropdown() {\n      if (this.selectedSection) {\n        const filteredData = this.allData.filter(item => item.TMS_SECTION === this.selectedSection);\n        const uniqueLines = [...new Set(filteredData.map(item => item.LINE))];\n        this.lines = uniqueLines;\n      }\n    },\n    updateDateDropdown() {\n      if (this.selectedLine && this.selectedSection) {\n        const filteredData = this.allData.filter(item => item.TMS_SECTION === this.selectedSection && item.LINE === this.selectedLine);\n        const uniqueDates = [...new Set(filteredData.map(item => item.RUNDATE))];\n        this.dates = uniqueDates;\n      }\n    },\n    filterAndDisplayData() {\n      // Apply filtering logic as before\n      // Filter the data based on selected filters (section, line, date, kmFrom, kmTo)\n      // Call the createTable() method to display the filtered data in a table\n    },\n    resetFilters() {\n      // Reset all filters to default values\n      this.selectedSection = '';\n      this.selectedLine = '';\n      this.selectedDate = '';\n      this.kmFrom = '';\n      this.kmTo = '';\n      this.activetab = 'section'; // Reset to the \"Section\" tab\n    },\n    encodeCredentials(username, password) {\n      return btoa(`${username}:${password}`);\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["data","activetab","sections","lines","dates","selectedSection","selectedLine","selectedDate","kmFrom","kmTo","allData","methods","fetchData","fetch","headers","encodeCredentials","then","response","json","populateDropdowns","catch","error","console","alert","uniqueSections","Set","map","item","TMS_SECTION","updateLineDropdown","filteredData","filter","uniqueLines","LINE","updateDateDropdown","uniqueDates","RUNDATE","filterAndDisplayData","resetFilters","username","password","btoa","mounted"],"sources":["C:\\Users\\hp\\Desktop\\vue-sample-ui\\src\\components\\FilterForm.vue"],"sourcesContent":["<template>\r\n  <div id=\"tabs\" class=\"container\">\r\n    <!-- Tab Navigation -->\r\n    <div class=\"tabs\">\r\n      <a v-on:click=\"activetab = 'section'\" :class=\"{ active: activetab === 'section' }\">Section</a>\r\n      <a v-on:click=\"activetab = 'line'\" :class=\"{ active: activetab === 'line' }\">Line</a>\r\n      <a v-on:click=\"activetab = 'date'\" :class=\"{ active: activetab === 'date' }\">Date</a>\r\n    </div>\r\n\r\n    <!-- Tab Content -->\r\n    <div class=\"content\">\r\n      <div v-if=\"activetab === 'section'\" class=\"tabcontent\">\r\n        <!-- Section Dropdown -->\r\n        <div class=\"input-group\">\r\n          <label for=\"tmsSection\">Section:</label>\r\n          <select v-model=\"selectedSection\" @change=\"updateLineDropdown\">\r\n            <option value=\"\">-Select One-</option>\r\n            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"activetab === 'line'\" class=\"tabcontent\">\r\n        <!-- Line Dropdown -->\r\n        <div class=\"input-group\">\r\n          <label for=\"line\">Line:</label>\r\n          <select v-model=\"selectedLine\" :disabled=\"!selectedSection\" @change=\"updateDateDropdown\">\r\n            <option value=\"\">-ALL-</option>\r\n            <option v-for=\"line in lines\" :key=\"line\" :value=\"line\">{{ line }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"activetab === 'date'\" class=\"tabcontent\">\r\n        <!-- Date Dropdown -->\r\n        <div class=\"input-group\">\r\n          <label for=\"rundate\">Date:</label>\r\n          <select v-model=\"selectedDate\" :disabled=\"!selectedLine\">\r\n            <option value=\"\">-ALL-</option>\r\n            <option v-for=\"date in dates\" :key=\"date\" :value=\"date\">{{ date }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- KM From / KM To Inputs -->\r\n      <div class=\"input-group\">\r\n        <label for=\"kmFrom\">Km From:</label>\r\n        <input type=\"number\" v-model=\"kmFrom\" min=\"0\" :disabled=\"!selectedDate\" />\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <label for=\"kmTo\">Km To:</label>\r\n        <input type=\"number\" v-model=\"kmTo\" min=\"0\" :disabled=\"!selectedDate\" />\r\n      </div>\r\n\r\n      <!-- Buttons -->\r\n      <div class=\"button-container\">\r\n        <button @click=\"filterAndDisplayData\">Generate Prediction</button>\r\n        <button @click=\"resetFilters\">Reset Filter</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      activetab: 'section',  // Active tab (initially \"section\")\r\n      sections: [],  // Available sections\r\n      lines: [],  // Available lines\r\n      dates: [],  // Available dates\r\n      selectedSection: '',  // Selected section\r\n      selectedLine: '',  // Selected line\r\n      selectedDate: '',  // Selected date\r\n      kmFrom: '',  // KM From\r\n      kmTo: '',  // KM To\r\n      allData: []  // Store the fetched data\r\n    };\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      // Fetch the data from API (same as before)\r\n      fetch('http://localhost:8000/dair/get-predictions', {\r\n        headers: {\r\n          'Authorization': `Basic ${this.encodeCredentials('DAIR_ML', 'TDMDATAPREP')}`\r\n        }\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.allData = data;\r\n          this.populateDropdowns(data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching data:', error);\r\n          alert('Error fetching data. Please check console for details.');\r\n        });\r\n    },\r\n\r\n    populateDropdowns(data) {\r\n      // Populate the section dropdown\r\n      const uniqueSections = [...new Set(data.map(item => item.TMS_SECTION))];\r\n      this.sections = uniqueSections;\r\n\r\n      // Populate the lines and dates\r\n      this.updateLineDropdown();\r\n    },\r\n\r\n    updateLineDropdown() {\r\n      if (this.selectedSection) {\r\n        const filteredData = this.allData.filter(item => item.TMS_SECTION === this.selectedSection);\r\n        const uniqueLines = [...new Set(filteredData.map(item => item.LINE))];\r\n        this.lines = uniqueLines;\r\n      }\r\n    },\r\n\r\n    updateDateDropdown() {\r\n      if (this.selectedLine && this.selectedSection) {\r\n        const filteredData = this.allData.filter(item => \r\n          item.TMS_SECTION === this.selectedSection && item.LINE === this.selectedLine\r\n        );\r\n        const uniqueDates = [...new Set(filteredData.map(item => item.RUNDATE))];\r\n        this.dates = uniqueDates;\r\n      }\r\n    },\r\n\r\n    filterAndDisplayData() {\r\n      // Apply filtering logic as before\r\n      // Filter the data based on selected filters (section, line, date, kmFrom, kmTo)\r\n      // Call the createTable() method to display the filtered data in a table\r\n    },\r\n\r\n    resetFilters() {\r\n      // Reset all filters to default values\r\n      this.selectedSection = '';\r\n      this.selectedLine = '';\r\n      this.selectedDate = '';\r\n      this.kmFrom = '';\r\n      this.kmTo = '';\r\n      this.activetab = 'section'; // Reset to the \"Section\" tab\r\n    },\r\n\r\n    encodeCredentials(username, password) {\r\n      return btoa(`${username}:${password}`);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.tabs {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 20px 0;\r\n}\r\n\r\n.tabs a {\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  background-color: #f1f1f1;\r\n  text-decoration: none;\r\n}\r\n\r\n.tabs a.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.tabcontent {\r\n  display: none;\r\n}\r\n\r\n.tabcontent.active {\r\n  display: block;\r\n}\r\n\r\n.input-group {\r\n  margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}